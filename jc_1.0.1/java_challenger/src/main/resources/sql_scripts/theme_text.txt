1.    <h1>Классы и объекты</h1>
                <br></br>
                <small>
                    <p>Java является объектно-ориентированным языком программирования. Как язык, который имеет функцию объектно-ориентирования, он поддерживает следующие основные понятия:</p>
                    <ul>
                        <li>Полиморфизм.</li>
                        <li>Наследование.</li>
                        <li>Инкапсуляция.</li>
                        <li>Абстракция.</li>
                        <li>Классы.</li>
                        <li>Объекты.</li>
                        <li>Экземпляр.</li>
                        <li>Метод.</li>
                        <li>Парсинг.</li>
                    </ul>
                    <p>В этой главе мы рассмотрим <strong>объекты и классы в Java</strong>, их концепции.</p>
                    <p>Класс может быть определен как шаблон (обозначен зеленым цветом), который описывает поведение объекта, который в свою очередь имеет состояние и поведение. Он является экземпляром класса. Например: собака может иметь состояние - цвет, имя, а также и поведение - кивать, лаить, есть.</p>
                    <h2 id="0">Объекты в Java</h2>
                    <p>Давайте теперь посмотрим вглубь, что является объектами. Если мы рассмотрим реальный мир, то найдём много предметов вокруг нас, автомобили, собаки, люди, и т.д. Все они имеют состояние и образ жизни.</p>
                    <p>Если учесть, собаку, то ее состояние - имя, порода, цвет, а образ жизни - лай, виляние хвостом, бег.</p>
                    <p>Если сравнить программный объект в Java с предметов из реального мира, то они имеют очень схожие характеристики, у них также есть состояние и поведение. Программное состояние хранят в полях, а поведение отображается через методы.</p>
                    <p>Таким образом, в разработке программного обеспечения, методы работают на внутреннем состоянии объекта, а связи с другими, осуществляется с помощью методов.</p>
                    <h2 id="1">Классы в Java</h2>
                    <p>Класс, из которого создаются отдельные объекты, обозначен зеленым цветом.</p>
                    <p>Пример создания класса в Java, приводится ниже:</p>
                    <pre><code class="java">public class Dog{
   String breed;
   int age;
   String color;

   void barking(){
   }

   void hungry(){
   }

   void sleeping(){
   }
}
</code></pre>
                    <p>Класс может содержать любой из следующих видов переменных:</p>
                    <ul><li>Локальные переменные, определенные внутри методов, конструкторов или блоков. Они будут объявлены и инициализированы в методе, и будут уничтожены, когда метод завершится.</li>
                        <li>Переменные экземпляра являются переменными в пределах класса, но и снаружи любого метода. Они инициализируются при загрузке. Переменные экземпляра могут быть доступны из внутри любого метода, конструктора или блоков этого конкретного класса.</li>
                        <li>Переменные класса или статические переменные класса в Java объявляются в классе вне любого метода с помощью статического ключевого слова.</li></ul>
                    <p>В Java классы могут иметь любое количество методов для доступа к значению различных видов методов. В приведенном выше примере, barking(), hungry() и sleeping() являются методами.</p>
                    <p>Далее упомянуты некоторые из важных тем, которые должны быть рассмотрены для понимания значения классов и объектов в языке программирования.</p>
                    <h2 id="2">Конструктор класса</h2>
                    <p>При обсуждении вопроса класса, одной из наиболее важных подтем в Java является конструктор. Каждый класс имеет конструктор. Если мы не напишем его или, например, забудем, компилятор создаст его по умолчанию для этого класса.</p>
                    <p>Каждый раз, когда в <strong>Java создается новый объект</strong>, будет вызываться по меньшей мере один конструктор. Главное правило является то, что они должны иметь то же имя, что и класс, который может иметь более одного конструктора.</p>
                    <p>Пример конструктора приведен ниже:</p>
                    <pre><code class="java">public class Puppy{
   public Puppy(){
   }

   public Puppy(String name){
      // Так выглядит конструктор в Java и у него один параметр, name.
   }
}
</code></pre>
                    <strong>Примечание:</strong> в следующих разделах мы будем более подробно обсуждать, если у нас будет два разных типа конструкторов.
                    <h2 id="3">Создание объекта</h2>
                    <p>Варианты <strong>как создать объект в классе</strong> следующие:</p>
                    <ul>
                        <li><strong>Объявление</strong>: объявление переменной с именем переменной с типом объекта.</li>
                        <li><strong>Инстанцирование</strong>: используется «новое» ключевое слово.</li>
                        <li><strong>Инициализация</strong>: «новое» ключевое слово сопровождается вызовом конструктора. Этот вызов инициализирует новый объект.</li>
                    </ul>
                    <p>Пример приводится ниже:</p>
                    <pre><code class="java">public class Puppy{

   public Puppy(String name){
      // Это конструктор и у него один параметр, name.
      System.out.println("Передаваемое имя:" + name );
   }
   public static void main(String []args){
      // Создание объекта myPuppy.
      Puppy myPuppy = new Puppy( "Багет" );
   }
}
</code></pre>
                    <p>Если Вы скомпилируете и запустите выше программу, то она выдаст следующий результат:</p>
                    <pre><code class="html">Передаваемое имя: Багет
</code></pre>
                    <h2 id="4">Доступ к переменным экземпляра и методам в Java</h2>
                    <p>Переменные и методы доступны через созданные объекты. Чтобы получить доступ к переменной экземпляра, полный путь должен выглядеть следующим образом::</p>
                    <pre><code class="java">/* Сначала создайте объект */
ObjectReference = new Constructor();

/* Теперь вызовите переменную следующим образом */
ObjectReference.variableName;

/* Теперь Вы можете вызвать метод класса */
ObjectReference.MethodName();
</code></pre>
                    <h3>Пример</h3>
                    <p>Этот пример объясняет, как получить доступ к переменные экземпляра и методам класса в Java:</p>
                    <pre><code class="java">public class Puppy{

   int puppyAge;

   public Puppy(String name){
      // Это конструктор и у него один параметр, name.
      System.out.println("Передаваемое имя:" + name );
   }
   public void setAge( int age ){
       puppyAge = age;
   }

   public int getAge( ){
       System.out.println("Возраст щенка:" + puppyAge );
       return puppyAge;
   }
   public static void main(String []args){
      /* Создание объекта. */
      Puppy myPuppy = new Puppy( "Багет" );

      /* Вызов метод класса, чтобы установить возраст щенка. */
      myPuppy.setAge( 2 );

      /* Вызов другого метода класса, чтобы получить возраст щенка. */
      myPuppy.getAge( );

      /* Получение переменной экземпляра класса. */
      System.out.println("Значение переменной:" + myPuppy.puppyAge );
   }
}
</code></pre>
                    <p>Если Вы скомпилируете и запустите выше программу, то она выдаст следующий результат:</p>
                    <pre><code class="html">Передаваемое имя: Багет
Возраст щенка: 2
Значение переменной: 2
</code></pre>
                    <h2 id="5">Правила объявления классов, операторов импорта и пакетов в исходном файле</h2>
                    <p>В последней части этого раздела давайте рассмотрим правила декларации исходного файла. Эти правила в Java имеют важное значение при объявлении классов, операторов импорта и операторов пакета в исходном файле.</p>
                    <ul>
                        <li>В исходном файле может быть только один публичный класс (public class).</li>
                        <li>Исходный файл может иметь несколько "непубличных" классов.</li>
                        <li>Название публичного класса должно совпадать с именем исходного файла, который должен иметь расширение <strong>.java</strong> в конце. Например: имя класса <em>public class Employee{}</em>, то исходный файл должен быть <em>Employee.java</em>.</li>
                        <li>Если класс определен внутри пакета, то оператор пакет должно быть первым оператором в исходном файле.</li>
                        <li>Если присутствуют операторы импорта, то они должны быть написаны между операторами пакета и объявлением класса. Если нет никаких операторов пакета, то оператор импорта должен быть первой строкой в исходном файле.</li>
                        <li>Операторы импорта и пакета будут одинаково выполняться для всех классов, присутствующих в исходном файле. В Java не представляется возможным объявить различные операторы импорта и/или пакета к различным классам в исходном файле.</li>
                    </ul>
                    <p>Классы имеют несколько уровней доступа и существуют различные типы классов: абстрактные классы (abstract class), конечные классы (final class) и т.д. Обо всем этом обсудим в разделе <a href="http://proglang.su/java/143" title="Модификаторы доступа в Java">модификаторы доступа</a>.</p>
                    <p>Помимо указанных выше типов классов, Java также имеет некоторые специальные классы, называемые внутренние (Inner class) и анонимные классы (Anonymous class).
                    <h2 id="6">Java пакет (package)</h2>
                    <p>При разработке приложений сотни классов и интерфейсов будет написано, поэтому категоризации этих классов является обязательным, а также это делает жизнь намного проще.</p>
                    <h2 id="7">Операторы импорта (import)</h2>
                    <p>Если задать полное имя, которое включает в себя пакет и имя класса, то компилятор может легко найти исходный код или классы. В Java импорт это способ задать правильное место для компилятора, чтобы найти конкретный класс.</p>
                    <p>Например, следующая строка будет просить компилятор загрузить все классы, доступные в каталоге «java_installation/java/io»:</p>
                    <pre><code class="java">import java.io.*;
</code></pre>
                    <h2 id="8">Простой пример по выше описанному</h2>
                    <p>Для нашего обучения создадим два класса. Это будут классы Employee и EmployeeTest.</p>
                    <p>Для начала откройте блокнот и добавьте следующий код. Помните, что этот класс Employee является открытым или публичным классом. Теперь сохраните исходный файл с именем Employee.java.</p>
                    <p>Класс Employee имеет четыре переменных экземпляра name, age, designation и salary. Он имеет один явно определенный конструктор, который принимает параметр.</p>
                    <pre><code class="java">import java.io.*;
public class Employee{
   String name;
   int age;
   String designation;
   double salary;

   // Это конструктор класса Employee.
   public Employee(String name){
      this.name = name;
   }
   // Присвоение возраста работника переменной age.
   public void empAge(int empAge){
      age =  empAge;
   }
   /* Присвоение переменной designation. */
   public void empDesignation(String empDesig){
      designation = empDesig;
   }
   /* Присвоение переменной salary. */
   public void empSalary(double empSalary){
      salary = empSalary;
   }
   /* Вывод подробной информации. */
   public void printEmployee(){
      System.out.println("Имя:"+ name );
      System.out.println("Возраст:" + age );
      System.out.println("Наименование:" + designation );
      System.out.println("Заработная плата:" + salary);
   }
}
</code></pre>
                    <p>Как упоминалось выше, обработка начинается с основного метода. Поэтому для нас, чтобы запустить класс Employee, должен быть главный метод и созданные объекты. Создадим отдельный класс для этих задач.</p>
                    <p>Ниже приводится класс EmployeeTest, в котором создаются два экземпляра класса Employee и вызывают методы для каждого объекта, для присвоения значений каждой переменной.</p>
                    <p>Сохраните следующий код в файл «EmployeeTest.java»:</p>
                    <pre><code class="java">import java.io.*;
public class EmployeeTest{

   public static void main(String args[]){
      /* Создание двух объектов с помощью конструктора. */
      Employee empOne = new Employee("Олег Олегов");
      Employee empTwo = new Employee("Иван Иванов");

      // Вызов метода для каждого созданного объекта.
      empOne.empAge(26);
      empOne.empDesignation("Старший инженер-программист");
      empOne.empSalary(1000);
      empOne.printEmployee();

      empTwo.empAge(21);
      empTwo.empDesignation("Инженер-программист");
      empTwo.empSalary(500);
      empTwo.printEmployee();
   }
}
</code></pre>
                    <p>Теперь, скомпилировав оба класса, запустим EmployeeTest и получим следующий результат:</p>
                    <pre><code class="html">C:> javac Employee.java
C:> vi EmployeeTest.java
C:> javac EmployeeTest.java
C:> java EmployeeTest
Имя: Олег Олегов
Возраст: 26
Наименование: Старший инженер-программист
Заработная плата: 1000.0
Имя: Иван Иванов
Возраст: 21
Наименование: Инженер-программист
Заработная плата: 500.0
</code></pre>

                </small>
2. <h1>Типы данных</h1>
                <br></br>
                <small>
                <p>Переменные не что иное как зарезервированные места памяти для хранения значений. Это означает, что при создании переменной Вы резервируете некоторое пространство в памяти.</p>
                <p>Основываясь на типе данных, который присвоен переменной, операционная система выделяет память и решает, что может быть сохранено в зарезервированную памяти. Поэтому, назначая различные типы данных для переменных, в Java можно хранить целые числа, десятичные дроби или символов в этих переменных.</p>
                <p>Существует два типа данных в Java:</p>
                <ul><li>простые или примитивные типы данных;</li>
                    <li>ссылочные типы данных (ссылка/объект).</li></ul>
                <h2 id="0">Примитивные типы данных</h2>
                <p>Есть восемь типов данных, поддерживаемых Java. Основные типы данных, предопределенны языком и названы по <a href="http://proglang.su/java/7" title="50 ключевых слов в Java">ключевому слову</a>. Теперь давайте посмотрим в деталях эти <strong>восемь базовых типов данных</strong> существующих в языке программирования Java.</p>
                <h3>byte:</h3>
                <ul><li>Тип данных byte является 8-разрядным знаковым целым числом.</li>
                    <li>Минимальная величина равна -128 (-2<sup>7</sup>).</li>
                    <li>Максимальное значение равно 127 (включительно) (2<sup>7</sup>-1).</li>
                    <li>По умолчанию – 0.</li>
                    <li>byte предназначен для экономии места в больших массивах, главным образом вместо целых чисел, поскольку byte в четыре раза меньше, чем int.</li>
                    <li>Пример:
                        <pre><code class="java">byte a = 100;
byte b = -50;</code></pre></li></ul>
                <h3>short:</h3>
                <ul><li>Тип данных short является 16-разрядным знаковым целым числом.</li>
                    <li>Минимальное значение равно -32768 (-2<sup>15</sup>).</li>
                    <li>Максимальная величина равна 32 767 (включительно) (2<sup>15</sup>-1).</li>
                    <li>short в Java может также использоваться для экономии памяти как byte. Short в 2 раза меньше, чем int.</li>
                    <li>По умолчанию – 0.</li>
                    <li>Пример:
                        <pre><code class="java">short s = 10000;
short r = -20000;</code></pre></li></ul>
                <h3>int:</h3>
                <ul><li>В языке Java тип данных int является 32-разрядным знаковым целым числом.</li>
                    <li>Минимальное значение - 2 147 483 648 (-2<sup>31</sup>).</li>
                    <li>Максимальная величина равна 2,147,483,647 (включительно)(2<sup>31</sup>-1).</li>
                    <li>int обычно используется для целых значений. Если нет озабоченности по поводу памяти.</li>
                    <li>По умолчанию равно 0.</li>
                    <li>Пример:
                        <pre><code class="java">int a = 100000;
int b =-200000;</code></pre></li></ul>
                <h3>long:</h3>
                <ul><li>Тип данных long является 64-разрядным знаковым целым числом.</li>
                    <li>Минимальное значение равно – 9,223,372,036,854,775,808 (-2<sup>63</sup>).</li>
                    <li>Максимальная величина – 9,223,372,036,854,775,807 (включительно). (2<sup>63</sup>-1).</li>
                    <li>В Java Применяется когда требуется более широкий диапазон, чем int.</li>
                    <li>По умолчанию – 0L.</li>
                    <li>Пример:
                        <pre><code class="java">long a = 100000L;
long b =-200000L;</code></pre></li></ul>
                <h3>float:</h3>
                <ul><li>Тип данных float является c одинарной точностью 32-битный IEEE 754 с плавающей точкой.</li>
                    <li>Float используется главным образом для сохранения памяти в больших массивах чисел с плавающей точкой.</li>
                    <li>По умолчанию – 0.0f.</li>
                    <li>float никогда не должен применяется для точного значения, например, валюты.</li>
                    <li>Пример:
                        <pre><code class="java">float f1 = 234.5f;</code></pre></li></ul>
                <h3>double:</h3>
                <ul><li>Тип данных double является c двойной точностью 64-битный IEEE 754 с плавающей точкой.</li>
                    <li>Обычно используется для десятичных значений.</li>
                    <li>double никогда не должен применяется для точного значения, например, валюты.</li>
                    <li>По умолчанию – 0.0d.</li>
                    <li>Пример:
                        <pre><code class="java">double d1 = 123.4;</code></pre></li></ul>
                <h3>boolean:</h3>
                <ul><li>Тип данных boolean представляет собой один бит информации.</li>
                    <li>Существует только два возможных значения: true и false.</li>
                    <li>Предназначен для простых признаков, которые позволяют отслеживать условия true или false.</li>
                    <li>По умолчанию – false.</li>
                    <li>Пример:
                        <pre><code class="java">boolean one = true;</code></pre></li></ul>
                <h3>char:</h3>
                <ul><li>Тип данных char является одним 16-разрядным символом Юникода.</li>
                    <li>Минимальная величина равна «\u0000» (или 0).</li>
                    <li>Максимальная величина равна «\uffff» (или 65535 включительно).</li>
                    <li>В Java char нужен для хранения любого символа.</li>
                    <li>Пример:
                        <pre><code class="java">char letterA ='A';</code></pre></li></ul>
                <h2 id="1">Ссылочные типы данных</h2>
                <ul><li>Ссылочные переменные создаются с использованием определенных конструкторов классов. Они предназначены для доступа к объектам. Эти переменные объявляются с определенным типом, который не может быть изменен. Например, Employee, Puppy и т.д.</li>
                    <li>Объекты класса и различные виды переменных массива подпадают под <strong>ссылочный тип данных</strong>.</li>
                    <li>По умолчанию в Java значение любой переменной ссылки - null.</li>
                    <li>Ссылочная переменная может применяться для обозначения любого объекта, объявленного или любого совместимого типа.</li>
                    <li>Пример:
                        <pre><code class="java">Animal animal = new Animal("giraffe");</code></pre></li></ul>
                <h2 id="2">Литералы в Java</h2>
                <p>Литерал — представление исходного кода как фиксированное значение. Оно представлено непосредственно в коде без каких-либо вычислений.
                    Литерал в Java можно назначить любой переменной из основного типа. Например:</p>
                <pre><code class="java">byte a = 68;
char a = 'A';</code></pre>
                <p>Byte, int, long, и short может выражаться десятичной (основание 10), шестнадцатеричной (основание 16) или восьмеричной (основание 8) системой исчисления.</p>
                <p>При использовании литералов в Java, префикс 0 применяться для указания восьмеричной системы, а префикс 0x указывает на шестнадцатеричную систему. Например:</p>
                <pre><code class="java">int decimal = 100;
int octal = 0144;
int hexa =  0x64;</code></pre>
                <p>Строковые литералы в языке Java задаются как и в большинстве других языков, заключив последовательность символов между парой двойных кавычек. Примеры строковых литералов:</p>
                <pre><code class="java">"Hello World"
"two\nlines"
"\"This is in quotes\""</code></pre>
                <p>Типы литералов String и char могут содержать любые символы Юникода. Например:</p>
                <pre><code class="java">char a = '\u0001';
String a = "\u0001";</code></pre>
                <p>Язык Java поддерживает несколько специальных управляющих последовательностей для литералов String и char:</p>
                <table>
                    <tr><td>Обозначение</td>
                        <td>Представление</td></tr>
                    <tr><td>\n</td>
                        <td>Новая строка (0x0a)</td></tr>
                    <tr><td>\r</td>
                        <td>Возврат каретки (0x0d)</td></tr>
                    <tr><td>\f</td>
                        <td>Прогон страницы (0x0c)</td></tr>
                    <tr><td>\b</td>
                        <td>Возврат на шаг (0x08)</td></tr>
                    <tr><td>\s</td>
                        <td>пробел (0x20)</td></tr>
                    <tr><td>\t</td>
                        <td>Табуляция</td></tr>
                    <tr><td>\"</td>
                        <td>Двойная кавычка</td></tr>
                    <tr><td>\'</td>
                        <td>Апостроф</td></tr>
                    <tr><td>\\</td>
                        <td>Обратная косая черта</td></tr>
                    <tr><td>\ddd</td>
                        <td>Восьмеричный символ (ddd)</td></tr>
                    <tr><td>\uxxxx</td>
                        <td>Шестнадцатиричный символ UNICODE (xxxx)</td></tr>
                </table></small></font>

3. <p><h2>Циклы в Java</h2></p>

                <small>
                    <h3>For</h3>

                    Цикл for состоит из трех секций:

                    <pre>
                    for (int i = 0; i < 3; i++) {

                        }
                    1
                    for (int i = 0; i < 3; i++) {

                        }
                        </pre>
                    <br>
                    Первая секция выполняется один раз, когда мы входим в цикл.  В нашем примере здесь задается начальное значение переменной i. Вторая секция проверяет логическое условие, если оно возвращает true, выполняются операторы в цикле, если false, выход из цикла. Вторая секция в первый раз запускается сразу после первой секции, и выполняется каждый раз, пока условие верно, вызывая третью секцию. Третья секция — заключительный оператор, его действие выполняется каждый раз при выполнении цикла. В нашем примере это инкремент, который при каждом выполнении увеличивает значение переменной на единицу.

                    <p>Таким образом, цикл будет работать 3 раза. Вот порядок команд:</p>

                    <pre>
                    int i = 0;
                    i < 3 // 0 < 3 = true
                    // Inside of loop
                    i++ // i is now 1
                    i < 3 // 1 < 3 = true
                    // Inside of loop
                    i++ // i is now 2
                    i < 3 // 2 < 3 = true
                    // Inside of loop
                    i++ // i is now 3
                    i < 3 // 3 < 3 = false
                    // Loop is done...
                    1
                    2
                    3
                    4
                    5
                    6
                    7
                    8
                    9
                    10
                    11
                    12
                    int i = 0;
                    i < 3 // 0 < 3 = true
                    // Inside of loop
                    i++ // i is now 1
                    i < 3 // 1 < 3 = true
                    // Inside of loop
                    i++ // i is now 2
                    i < 3 // 2 < 3 = true
                    // Inside of loop
                    i++ // i is now 3
                    i < 3 // 3 < 3 = false
                    // Loop is done...
                    </pre>
                    <br>
                    Мы можем опустить первую и третью секции цикла (как бы странно это ни выглядело), и цикл все еще будет работать:

                    <pre>
                    for (;i < 5;) {}
                    1
                    for (;i < 5;) {}
                        </pre>
                    <br>
                    Для случаев, где нужно использовать цикл схожих повторяющихся действий, мы используем цикл while
                    <br>
                    <h3>While</h3>
                    Синтаксис похож на предыдущий:

                    <pre>
                    while (condition) {}
                    1
                    while (condition) {}
                        </pre>
                    <br>
                    Условие будет работать впервые при вводе и каждый раз, когда вызывается цикл. Если условие возвратит false, то цикл не будет работать.
                    Если мы хотим, чтобы цикл всегда выполнял по крайней мере одно действие, мы можем использовать do-while:

                    <pre>
                    do {

                    } while(condition);
                    1
                    2
                    3
                    do {

                    } while(condition);
                        </pre>
                    Не забудьте точку с запятой в конце.
                    <br>
                    <h3>Foreach</h3>
                    Другая версия for, это foreach. Но в Java решили не добавлять новое ключевое слово each. Ключевое слово, которое мы используем, все еще for, но когда мы хотим выполнить действия над элементами массива, делаем так:

                    <pre>
                    int[] arr = {2, 0, 1, 3};
                    for (int el : arr) {
                    System.out.println(el);
                    }
                    1
                    2
                    3
                    4
                    int[] arr = {2, 0, 1, 3};
                    for (int el : arr) {
                    System.out.println(el);
                    }
                    </pre>
                    <br>
                    Это была короткая версия, эквивалентная следующей записи:

                    <pre>
                    int[] arr = {1, 9, 9, 5};
                    for (int i = 0; i < arr.length; i++) {
                    int el = arr[i];
                    System.out.println(el);
                    }
                    1
                    2
                    3
                    4
                    5
                    int[] arr = {1, 9, 9, 5};
                    for (int i = 0; i < arr.length; i++) {
                    int el = arr[i];
                    System.out.println(el);
                    }
                    </pre>
                    Заметьте, что, если вы хотите использовать индекс элемента в цикле, Вы должны использовать более длинную версию и не можете использовать foreach.
                    <br>
                    <h3><b>break</b> и <b>continue</b></h3>
                    Эти два ключевых слова помогают нам управлять циклом из него. Оператор break останавливает цикл и переходит к оператору, следующему за ним:

                    <pre>
                    int i;
                    for (i = 0; i < 5; i++) {
                    if (i >= 2) {
                    break;
                    }
                    System.out.println("Yuhu");
                    }
                    System.out.println(i);
                    // Output:
                    // Yuhu
                    // Yuhu
                    // 2
                    1
                    2
                    3
                    4
                    5
                    6
                    7
                    8
                    9
                    10
                    11
                    12
                    int i;
                    for (i = 0; i < 5; i++) {
                    if (i >= 2) {
                    break;
                    }
                    System.out.println("Yuhu");
                    }
                    System.out.println(i);
                    // Output:
                    // Yuhu
                    // Yuhu
                    // 2
                    </pre>
                    <br>
                    Оператор <i>continue</i> остановит текущую итерацию и переместится в следующую. Заметьте, что в цикле for действие в третьей секции будет выполнено при этом.

                    <pre>
                    int i;
                    for (i = 0; i < 5; i++) {
                    if (i >= 3) {
                    break;
                    }
                    System.out.println("Yuhu");
                    if (i >= 1) {
                    continue;
                    }
                    System.out.println("Tata");
                    }
                    System.out.println(i);
                    // Output
                    // Yuhu
                    // Tata
                    // Yuhu
                    // Yuhu
                    // 3
                    1
                    2
                    3
                    4
                    5
                    6
                    7
                    8
                    9
                    10
                    11
                    12
                    13
                    14
                    15
                    16
                    17
                    18
                    int i;
                    for (i = 0; i < 5; i++) {
                    if (i >= 3) {
                    break;
                    }
                    System.out.println("Yuhu");
                    if (i >= 1) {
                    continue;
                    }
                    System.out.println("Tata");
                    }
                    System.out.println(i);
                    // Output
                    // Yuhu
                    // Tata
                    // Yuhu
                    // Yuhu
                    // 3
                    </pre>
                </small>

4.<h3>Типы переменных: локальные переменные, переменные экземпляра, статические переменные</h3>
                <br></br>
                <small>
                    <p>Переменная предоставляется нам именем хранения, чтобы нашей программой можно было манипулировать. Каждая переменная в Java имеет конкретный тип, который определяет размер и размещение её в памяти; диапазон значений, которые могут храниться в памяти; и набор операций, которые могут быть применены к переменной.</p>
                    <p>Необходимо объявить все переменные, прежде чем их использовать. Ниже показана основная форма объявления:</p>
                    <pre><code class="html">data type variable [ = value][, variable [= value] ...] ;</code></pre>
                    <p>Здесь data type является одним из типов данных в Java, а «variable» - это имя переменной, «value» - значение. Чтобы объявить более чем одну переменную указанного типа, можно использовать список с запятыми в качестве разделителей. </p>
                    <p>Ниже приведены примеры объявления переменной и инициализации в Java: </p>
                    <pre><code class="java">int a, b, c;         // Объявляет три целых a, b, и c.
int a = 10, b = 10;  // Пример инициализации.
byte b = 22;         // Инициализация переменной b типа byte.
double pi = 3.14159; // Объявление и присвоение величины pi.
char a = 'a';        // Переменная char a присваивает значением 'a'. </code></pre>
                    <p>В этом разделе рассмотрим различные типы переменных, доступных в языке Java. Существует <strong>три типа переменных</strong>: </p>
                    <ul><li>локальные переменные;</li>
                        <li>переменные экземпляра;</li>
                        <li>статические переменные или переменные класса.</li></ul>
                    <h2 id="0">Локальные переменные в Java</h2>
                    <ul><li>Локальные переменные объявляются в методах, конструкторах или блоках.</li>
                        <li>Локальные переменные создаются, когда метод, конструктор или блок запускается и уничтожаются после того, как завершиться метод, конструктор или блок.</li>
                        <li><a href="http://proglang.su/java/143" title="Модификаторы доступа в Java">Модификаторы доступа</a> нельзя использовать для локальных переменных.</li>
                        <li>Они являются видимыми только в пределах объявленного метода, конструктора или блока.</li>
                        <li>Локальные переменные реализуются на уровне стека внутри.</li>
                        <li><strong>В Java не существует для локальных переменных значения по умолчанию</strong>, так что они должны быть объявлены и начальное значение должны быть присвоено перед первым использованием.</li></ul>
                    <h3>Пример использования локальной переменной</h3>
                    <p>Здесь «age» – это локальная переменная. Это определяется внутри метода «pupAge()» и области её действия ограничивается только этим методом.</p>
                    <pre><code class="java">public class Test{
   public void pupAge(){
      int age = 0;
      age = age + 7;
      System.out.println("Возраст щенка: " + age);
   }

   public static void main(String args[]){
      Test test = new Test();
      test.pupAge();
   }
}</code></pre>
                    <p>Будет получен следующий результат:</p>
                    <pre><code class="html">Возраст щенка: 7</code></pre>
                    <h3>Пример без инициализации</h3>
                    <p>Пример использования «age» без инициализации.  Программа выдаст ошибку во время компиляции.</p>
                    <pre><code class="java">public class Test{
   public void pupAge(){
      int age;
      age = age + 7;
      System.out.println("Возраст щенка: " + age);
   }

   public static void main(String args[]){
      Test test = new Test();
      test.pupAge();
   }
}</code></pre>
                    <p>Это приведёт к следующему сообщению об ошибке во время компиляции:</p>
                    <pre><code class="html">Test.java:4:variable number might not have been initialized
age = age + 7;
         ^
1 error</code></pre>
                    <br></br>
                    <h2 id="1">Переменные экземпляра</h2>
                    <ul><li>Переменные экземпляра объявляются в классе, но за пределами метода, конструктора или какого-либо блока. </li>
                        <li>Когда для объекта в стеке выделяется пространство, создается слот для каждого значения переменной экземпляра. </li>
                        <li><strong>В Java переменные экземпляра</strong> создаются тогда, когда объект создан с помощью <a href="http://proglang.su/java/7" title="Ключевые слова, используемые языком Java">ключевого слова «new»</a> и разрушаются тогда, когда объект уничтожается. </li>
                        <li>Переменные содержат значения, которые должны ссылаться более чем на один метод, конструктор или блок, или на основные части состояния объекта, которые должны присутствовать на протяжении всего класса. </li>
                        <li>Переменные экземпляра могут быть объявлен на уровне класса, до или после использования. </li>
                        <li>Модификаторы доступа могут быть предоставлены для переменных экземпляра. </li>
                        <li>Переменные экземпляра в Java являются видимыми для всех методов, конструкторов и блоков в классе. Как правило рекомендуется сделать их private (уровень доступа). Однако можно сделать их видимыми для подклассов этих переменных с помощью модификаторов доступа. </li>
                        <li>Переменные экземпляра имеют значения по умолчанию. Для чисел по умолчанию равно 0, для логических – false, для ссылок на объект - null. Значения могут быть присвоены при объявлении или в конструкторе.</li>
                        <li><strong>Переменные экземпляра в Java</strong> могут быть доступны непосредственно путем вызова имени переменной внутри класса. Однако в статических методах и различных класса (когда к переменным экземпляра дана доступность) должны быть вызваны используя полное имя – <i>ObjectReference.VariableName</i>.</li></ul>
                    <h3>Пример использования</h3>
                    <pre><code class="java">import java.io.*;

public class Employee{
   // Переменная экземпляра открыта для любого дочернего класса.
   public String name;

   // Переменная salary видна только в Employee.
   private double salary;

   // Имя переменной присваивается в конструкторе.
   public Employee (String empName){
      name = empName;
   }

   // Переменной salary присваивается значение.
   public void setSalary(double empSal){
      salary = empSal;
   }

   // Этот метод выводит на экран данные сотрудников.
   public void printEmp(){
      System.out.println("имя: " + name );
      System.out.println("зарплата:" + salary);
   }

   public static void main(String args[]){
      Employee empOne = new Employee("Олег");
      empOne.setSalary(1000);
      empOne.printEmp();
   }
}</code></pre>
                    <p>Программа будет будет производить следующий результат:</p>
                    <pre><code class="html">имя: Олег
зарплата: 1000.0</code></pre>
                    <br></br>
                    <h2 id="2">Переменные класса или статические переменные в Java</h2>
                    <ul>
                        <li><strong>Переменные класса, также известные в Java как статические переменные</strong>, которые объявляются со статическим ключевым слово в классе, но за пределами метода, конструктора или блока.</li>
                        <li>Там будет только одна копия каждой статической переменной в классе, независимо от того, сколько объектов создано из него. </li>
                        <li>Статические переменные или переменные класса в Java используются редко, кроме когда объявляются как константы. Константы - переменные, которые объявлены как public/private, final и static. Константы никогда не меняются от первоначального значения.</li>
                        <li>В Java статические переменные создаются при запуске программы и уничтожаются, когда выполнение программы остановится. </li>
                        <li>Видимость похожа на переменную экземпляра. Однако большинство статических переменных объявляются как public, поскольку они должны быть доступны для пользователей класса. </li>
                        <li>Значения по умолчанию такое же, как и у переменных экземпляра. Для чисел по умолчанию равно 0, для данных типа Boolean - false; и для ссылок на объект - null. Значения могут быть присвоены при объявлении или в конструкторе. Кроме того, они могут быть присвоены в специальных блоках статического инициализатора. </li>
                        <li>Статические переменные могут быть доступны посредством вызова с именем класса <i>ClassName.VariableName</i>.</li>
                        <li>При объявлении переменных класса как public, static, final, имена находятся в верхнем регистре. Если статические переменные такими не являются, синтаксис такой же, как у переменных экземпляра и локальных.</li></ul>
                    <h3>Пример статических переменных или переменных класса</h3>
                    <pre><code class="java">import java.io.*;

public class Employee{
   // salary(зарплата) переменная private static
   private static double salary;

   // DEPARTMENT(отдел) – это константа
   public static final String DEPARTMENT = "Разработка ";

   public static void main(String args[]){
      salary = 1000;
      System.out.println(DEPARTMENT+"средняя зарплата: "+salary);
   }
}
</code></pre>
                    <p>Это будет производить следующий результат:</p>
                    <pre><code class="html">Разработка средняя зарплата: 1000</code></pre>
                    <p><strong>Примечание:</strong> для получения доступа из внешнего класса, константы должны быть доступны как Employee.DEPARTMENT.</p>
                </small>
